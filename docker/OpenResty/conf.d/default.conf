# Define upstream for Varnish service
upstream varnish_backend {
    server varnish:80; # Connect to Varnish container on port 80
}

# Optional: Redirect HTTP to HTTPS
server {
    listen 80;
    server_name _; # Listen for any hostname
    return 301 https://$host$request_uri;
}

# HTTPS Server Block
server {
    listen 443 ssl http2; # Enable HTTP/2
    server_name localhost magento2.docker; # Adjust as needed

    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/selfsigned.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Root path (can be useful, but requests are proxied)
    # root /app/pub; # If serving static files directly

    # Security headers (optional but recommended)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    # add_header Content-Security-Policy "default-src 'self';" always; # Start restrictive if needed

    # Location block to proxy everything to Varnish
    location / {
        proxy_pass http://varnish_backend; # Use the upstream name

        # Set proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;

        # Required for Magento Websocket support (e.g., Admin notifications)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Proxy timeouts
        proxy_connect_timeout 60s;
        proxy_read_timeout 1800s; # Increase for long Magento processes
        proxy_send_timeout 60s;
    }

    # Optional: Serve static files directly from Nginx for performance
    # If you uncomment this, ensure Varnish VCL doesn't cache these paths
    # location ~* ^/static/(version\d+/)?(.*)$ {
    #     root /app/pub; # Adjust if your code mount differs
    #     expires max;
    #     access_log off;
    #     log_not_found off;
    #     try_files $uri =404;
    # }
    #
    # location ~* ^/media/(.*)$ {
    #     root /app/pub; # Adjust if your code mount differs
    #     expires max;
    #     access_log off;
    #     log_not_found off;
    #     try_files $uri =404;
    # }
}
